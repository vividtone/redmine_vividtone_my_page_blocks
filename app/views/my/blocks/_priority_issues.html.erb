<h3><%= l(:priority_issues) %></h3>

<%
  open_issues = Issue.visible.open
  today = Date.today
  current_user_ids = [User.current.id] + User.current.group_ids

  due_today_issues = open_issues.find(:all,
    :conditions => [
      "(assigned_to_id in (?) or assigned_to_id is null) and due_date = ?",
      current_user_ids,
      Date.today
    ],
    :include => [:status, :project, :tracker, :priority],
    :order => "#{Project.table_name}.id")
  due_today_issues.reject! {|item| ! item.project.users.include?(User.current)}

  overdue_issues = open_issues.find(:all,
    :conditions => [
      "(assigned_to_id in (?) or assigned_to_id is null) and due_date < ?",
      current_user_ids,
      today,
    ],
    :include => [:status, :project, :tracker, :priority],
    :order => "due_date")
  overdue_issues.reject! {|item| ! item.project.users.include?(User.current)}

  default_priority = IssuePriority.find_by_is_default(true)
  if default_priority
    higher_priority_issues = open_issues.find(:all,
      :conditions => [
        "(assigned_to_id in (?) or assigned_to_id is null) and #{IssuePriority.table_name}.position > ?",
        current_user_ids,
        default_priority.position
      ],
      :include => [:status, :project, :tracker, :priority],
      :order => "#{IssuePriority.table_name}.position desc, due_date")
    higher_priority_issues.reject! {|item| ! item.project.users.include?(User.current)}
  else
    higher_priority_issues = []
  end

  near_due_issues = open_issues.find(:all,
    :conditions => [
      "(assigned_to_id in (?) or assigned_to_id is null) and ? < due_date and due_date <= ?",
      current_user_ids,
      today,
      today + 7
    ],
    :include => [:status, :project, :tracker, :priority],
    :order => "due_date")
%>
<% if higher_priority_issues.count > 0 %>
  <h4><%= l(:label_vmpb_higher_priority_issues) %> (<%= higher_priority_issues.count %>)</h4>
  <%= render :partial => 'issues/list_simple', :locals => {:issues => higher_priority_issues[0...30]} unless higher_priority_issues.empty? %>
<% end %>

<% if overdue_issues.count > 0 %>
  <h4><%= l(:label_vmpb_overdue_issues) %> (<%= overdue_issues.count %>)</h4>
  <%= render :partial => 'issues/list_simple', :locals => {:issues => overdue_issues[0...30]} unless overdue_issues.empty? %>
<% end %>

<% if due_today_issues.count > 0 %>
  <h4><%= l(:label_vmpb_due_today_issues) %> (<%= due_today_issues.count %>)</h4>
  <%= render :partial => 'issues/list_simple', :locals => {:issues => due_today_issues[0...30]}  unless due_today_issues.empty? %>
<% end %>

<% if near_due_issues.count > 0 %>
  <h4><%= l(:label_vmpb_near_due_issues) %> (<%= near_due_issues.count %>)</h4>
  <%= render :partial => 'issues/list_simple', :locals => {:issues => near_due_issues[0...30]} unless near_due_issues.empty? %>
<% end %>

<p class="small">
<%= link_to l(:label_vmpb_all_my_issues), :controller => 'issues',
      :action => 'index', :set_filter => 1, :assigned_to_id => 'me',
      :sort => 'priority:desc,due_date:asc' %>
<%= ' | '.html_safe + link_to(l(:label_vmpb_overall_issues), :controller => 'issues',
  :action => 'index', :sort => 'priority:desc,due_date:asc') if User.current.allowed_to?(:view_issues, nil, :global => true) %>
</p>
